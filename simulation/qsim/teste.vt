// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/11/2022 21:04:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    simple_480p
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module simple_480p_vlg_sample_tst(
	clk_pix,
	rst_pix,
	sampler_tx
);
input  clk_pix;
input  rst_pix;
output sampler_tx;

reg sample;
time current_time;
always @(clk_pix or rst_pix)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module simple_480p_vlg_check_tst (
	de,
	hsync,
	sx,
	sy,
	vsync,
	sampler_rx
);
input  de;
input  hsync;
input [9:0] sx;
input [9:0] sy;
input  vsync;
input sampler_rx;

reg  de_expected;
reg  hsync_expected;
reg [9:0] sx_expected;
reg [9:0] sy_expected;
reg  vsync_expected;

reg  de_prev;
reg  hsync_prev;
reg [9:0] sx_prev;
reg [9:0] sy_prev;
reg  vsync_prev;

reg  de_expected_prev;
reg  hsync_expected_prev;
reg [9:0] sx_expected_prev;
reg [9:0] sy_expected_prev;
reg  vsync_expected_prev;

reg  last_de_exp;
reg  last_hsync_exp;
reg [9:0] last_sx_exp;
reg [9:0] last_sy_exp;
reg  last_vsync_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	de_prev = de;
	hsync_prev = hsync;
	sx_prev = sx;
	sy_prev = sy;
	vsync_prev = vsync;
end

// update expected /o prevs

always @(trigger)
begin
	de_expected_prev = de_expected;
	hsync_expected_prev = hsync_expected;
	sx_expected_prev = sx_expected;
	sy_expected_prev = sy_expected;
	vsync_expected_prev = vsync_expected;
end



// expected de
initial
begin
	de_expected = 1'bX;
	de_expected = #999000 1'b0;
end 

// expected hsync
initial
begin
	hsync_expected = 1'bX;
	hsync_expected = #999000 1'b0;
end 
// expected sx[ 9 ]
initial
begin
	sx_expected[9] = 1'bX;
	sx_expected[9] = #999000 1'b0;
end 
// expected sx[ 8 ]
initial
begin
	sx_expected[8] = 1'bX;
	sx_expected[8] = #999000 1'b0;
end 
// expected sx[ 7 ]
initial
begin
	sx_expected[7] = 1'bX;
	sx_expected[7] = #999000 1'b0;
end 
// expected sx[ 6 ]
initial
begin
	sx_expected[6] = 1'bX;
	sx_expected[6] = #999000 1'b0;
end 
// expected sx[ 5 ]
initial
begin
	sx_expected[5] = 1'bX;
	sx_expected[5] = #999000 1'b0;
end 
// expected sx[ 4 ]
initial
begin
	sx_expected[4] = 1'bX;
	sx_expected[4] = #999000 1'b0;
end 
// expected sx[ 3 ]
initial
begin
	sx_expected[3] = 1'bX;
	sx_expected[3] = #999000 1'b0;
end 
// expected sx[ 2 ]
initial
begin
	sx_expected[2] = 1'bX;
	sx_expected[2] = #999000 1'b0;
end 
// expected sx[ 1 ]
initial
begin
	sx_expected[1] = 1'bX;
	sx_expected[1] = #999000 1'b0;
end 
// expected sx[ 0 ]
initial
begin
	sx_expected[0] = 1'bX;
	sx_expected[0] = #999000 1'b0;
end 
// expected sy[ 9 ]
initial
begin
	sy_expected[9] = 1'bX;
	sy_expected[9] = #999000 1'b0;
end 
// expected sy[ 8 ]
initial
begin
	sy_expected[8] = 1'bX;
	sy_expected[8] = #999000 1'b0;
end 
// expected sy[ 7 ]
initial
begin
	sy_expected[7] = 1'bX;
	sy_expected[7] = #999000 1'b0;
end 
// expected sy[ 6 ]
initial
begin
	sy_expected[6] = 1'bX;
	sy_expected[6] = #999000 1'b0;
end 
// expected sy[ 5 ]
initial
begin
	sy_expected[5] = 1'bX;
	sy_expected[5] = #999000 1'b0;
end 
// expected sy[ 4 ]
initial
begin
	sy_expected[4] = 1'bX;
	sy_expected[4] = #999000 1'b0;
end 
// expected sy[ 3 ]
initial
begin
	sy_expected[3] = 1'bX;
	sy_expected[3] = #999000 1'b0;
end 
// expected sy[ 2 ]
initial
begin
	sy_expected[2] = 1'bX;
	sy_expected[2] = #999000 1'b0;
end 
// expected sy[ 1 ]
initial
begin
	sy_expected[1] = 1'bX;
	sy_expected[1] = #999000 1'b0;
end 
// expected sy[ 0 ]
initial
begin
	sy_expected[0] = 1'bX;
	sy_expected[0] = #999000 1'b0;
end 

// expected vsync
initial
begin
	vsync_expected = 1'bX;
	vsync_expected = #999000 1'b0;
end 
// generate trigger
always @(de_expected or de or hsync_expected or hsync or sx_expected or sx or sy_expected or sy or vsync_expected or vsync)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected de = %b | expected hsync = %b | expected sx = %b | expected sy = %b | expected vsync = %b | ",de_expected_prev,hsync_expected_prev,sx_expected_prev,sy_expected_prev,vsync_expected_prev);
	$display("| real de = %b | real hsync = %b | real sx = %b | real sy = %b | real vsync = %b | ",de_prev,hsync_prev,sx_prev,sy_prev,vsync_prev);
`endif
	if (
		( de_expected_prev !== 1'bx ) && ( de_prev !== de_expected_prev )
		&& ((de_expected_prev !== last_de_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port de :: @time = %t",  $realtime);
		$display ("     Expected value = %b", de_expected_prev);
		$display ("     Real value = %b", de_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_de_exp = de_expected_prev;
	end
	if (
		( hsync_expected_prev !== 1'bx ) && ( hsync_prev !== hsync_expected_prev )
		&& ((hsync_expected_prev !== last_hsync_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hsync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hsync_expected_prev);
		$display ("     Real value = %b", hsync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hsync_exp = hsync_expected_prev;
	end
	if (
		( sx_expected_prev[0] !== 1'bx ) && ( sx_prev[0] !== sx_expected_prev[0] )
		&& ((sx_expected_prev[0] !== last_sx_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sx[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sx_expected_prev);
		$display ("     Real value = %b", sx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sx_exp[0] = sx_expected_prev[0];
	end
	if (
		( sx_expected_prev[1] !== 1'bx ) && ( sx_prev[1] !== sx_expected_prev[1] )
		&& ((sx_expected_prev[1] !== last_sx_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sx[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sx_expected_prev);
		$display ("     Real value = %b", sx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sx_exp[1] = sx_expected_prev[1];
	end
	if (
		( sx_expected_prev[2] !== 1'bx ) && ( sx_prev[2] !== sx_expected_prev[2] )
		&& ((sx_expected_prev[2] !== last_sx_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sx[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sx_expected_prev);
		$display ("     Real value = %b", sx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sx_exp[2] = sx_expected_prev[2];
	end
	if (
		( sx_expected_prev[3] !== 1'bx ) && ( sx_prev[3] !== sx_expected_prev[3] )
		&& ((sx_expected_prev[3] !== last_sx_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sx[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sx_expected_prev);
		$display ("     Real value = %b", sx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sx_exp[3] = sx_expected_prev[3];
	end
	if (
		( sx_expected_prev[4] !== 1'bx ) && ( sx_prev[4] !== sx_expected_prev[4] )
		&& ((sx_expected_prev[4] !== last_sx_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sx[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sx_expected_prev);
		$display ("     Real value = %b", sx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sx_exp[4] = sx_expected_prev[4];
	end
	if (
		( sx_expected_prev[5] !== 1'bx ) && ( sx_prev[5] !== sx_expected_prev[5] )
		&& ((sx_expected_prev[5] !== last_sx_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sx[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sx_expected_prev);
		$display ("     Real value = %b", sx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sx_exp[5] = sx_expected_prev[5];
	end
	if (
		( sx_expected_prev[6] !== 1'bx ) && ( sx_prev[6] !== sx_expected_prev[6] )
		&& ((sx_expected_prev[6] !== last_sx_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sx[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sx_expected_prev);
		$display ("     Real value = %b", sx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sx_exp[6] = sx_expected_prev[6];
	end
	if (
		( sx_expected_prev[7] !== 1'bx ) && ( sx_prev[7] !== sx_expected_prev[7] )
		&& ((sx_expected_prev[7] !== last_sx_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sx[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sx_expected_prev);
		$display ("     Real value = %b", sx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sx_exp[7] = sx_expected_prev[7];
	end
	if (
		( sx_expected_prev[8] !== 1'bx ) && ( sx_prev[8] !== sx_expected_prev[8] )
		&& ((sx_expected_prev[8] !== last_sx_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sx[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sx_expected_prev);
		$display ("     Real value = %b", sx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sx_exp[8] = sx_expected_prev[8];
	end
	if (
		( sx_expected_prev[9] !== 1'bx ) && ( sx_prev[9] !== sx_expected_prev[9] )
		&& ((sx_expected_prev[9] !== last_sx_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sx[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sx_expected_prev);
		$display ("     Real value = %b", sx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sx_exp[9] = sx_expected_prev[9];
	end
	if (
		( sy_expected_prev[0] !== 1'bx ) && ( sy_prev[0] !== sy_expected_prev[0] )
		&& ((sy_expected_prev[0] !== last_sy_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sy[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sy_expected_prev);
		$display ("     Real value = %b", sy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sy_exp[0] = sy_expected_prev[0];
	end
	if (
		( sy_expected_prev[1] !== 1'bx ) && ( sy_prev[1] !== sy_expected_prev[1] )
		&& ((sy_expected_prev[1] !== last_sy_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sy[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sy_expected_prev);
		$display ("     Real value = %b", sy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sy_exp[1] = sy_expected_prev[1];
	end
	if (
		( sy_expected_prev[2] !== 1'bx ) && ( sy_prev[2] !== sy_expected_prev[2] )
		&& ((sy_expected_prev[2] !== last_sy_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sy[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sy_expected_prev);
		$display ("     Real value = %b", sy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sy_exp[2] = sy_expected_prev[2];
	end
	if (
		( sy_expected_prev[3] !== 1'bx ) && ( sy_prev[3] !== sy_expected_prev[3] )
		&& ((sy_expected_prev[3] !== last_sy_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sy[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sy_expected_prev);
		$display ("     Real value = %b", sy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sy_exp[3] = sy_expected_prev[3];
	end
	if (
		( sy_expected_prev[4] !== 1'bx ) && ( sy_prev[4] !== sy_expected_prev[4] )
		&& ((sy_expected_prev[4] !== last_sy_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sy[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sy_expected_prev);
		$display ("     Real value = %b", sy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sy_exp[4] = sy_expected_prev[4];
	end
	if (
		( sy_expected_prev[5] !== 1'bx ) && ( sy_prev[5] !== sy_expected_prev[5] )
		&& ((sy_expected_prev[5] !== last_sy_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sy[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sy_expected_prev);
		$display ("     Real value = %b", sy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sy_exp[5] = sy_expected_prev[5];
	end
	if (
		( sy_expected_prev[6] !== 1'bx ) && ( sy_prev[6] !== sy_expected_prev[6] )
		&& ((sy_expected_prev[6] !== last_sy_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sy[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sy_expected_prev);
		$display ("     Real value = %b", sy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sy_exp[6] = sy_expected_prev[6];
	end
	if (
		( sy_expected_prev[7] !== 1'bx ) && ( sy_prev[7] !== sy_expected_prev[7] )
		&& ((sy_expected_prev[7] !== last_sy_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sy[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sy_expected_prev);
		$display ("     Real value = %b", sy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sy_exp[7] = sy_expected_prev[7];
	end
	if (
		( sy_expected_prev[8] !== 1'bx ) && ( sy_prev[8] !== sy_expected_prev[8] )
		&& ((sy_expected_prev[8] !== last_sy_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sy[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sy_expected_prev);
		$display ("     Real value = %b", sy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sy_exp[8] = sy_expected_prev[8];
	end
	if (
		( sy_expected_prev[9] !== 1'bx ) && ( sy_prev[9] !== sy_expected_prev[9] )
		&& ((sy_expected_prev[9] !== last_sy_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sy[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sy_expected_prev);
		$display ("     Real value = %b", sy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sy_exp[9] = sy_expected_prev[9];
	end
	if (
		( vsync_expected_prev !== 1'bx ) && ( vsync_prev !== vsync_expected_prev )
		&& ((vsync_expected_prev !== last_vsync_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vsync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vsync_expected_prev);
		$display ("     Real value = %b", vsync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vsync_exp = vsync_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module simple_480p_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_pix;
reg rst_pix;
// wires                                               
wire de;
wire hsync;
wire [9:0] sx;
wire [9:0] sy;
wire vsync;

wire sampler;                             

// assign statements (if any)                          
simple_480p i1 (
// port map - connection between master ports and signals/registers   
	.clk_pix(clk_pix),
	.de(de),
	.hsync(hsync),
	.rst_pix(rst_pix),
	.sx(sx),
	.sy(sy),
	.vsync(vsync)
);

// clk_pix
always
begin
	clk_pix = 1'b0;
	clk_pix = #5000 1'b1;
	#5000;
end 

// rst_pix
initial
begin
	rst_pix = 1'b0;
end 

simple_480p_vlg_sample_tst tb_sample (
	.clk_pix(clk_pix),
	.rst_pix(rst_pix),
	.sampler_tx(sampler)
);

simple_480p_vlg_check_tst tb_out(
	.de(de),
	.hsync(hsync),
	.sx(sx),
	.sy(sy),
	.vsync(vsync),
	.sampler_rx(sampler)
);
endmodule

